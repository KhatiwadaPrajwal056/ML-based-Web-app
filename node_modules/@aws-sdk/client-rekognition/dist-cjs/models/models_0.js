"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.VideoColorRange = exports.VideoJobStatus = exports.FaceSearchSortBy = exports.FaceAttributes = exports.UnsuccessfulFaceDisassociationReason = exports.TextTypes = exports.HumanLoopQuotaExceededException = exports.DetectLabelsFeatureName = exports.ResourceNotReadyException = exports.StreamProcessorStatus = exports.InvalidPaginationTokenException = exports.ProjectVersionStatus = exports.InvalidPolicyRevisionIdException = exports.ProjectStatus = exports.UnsuccessfulFaceDeletionReason = exports.DatasetStatusMessageCode = exports.DatasetStatus = exports.CustomizationFeature = exports.ProjectAutoUpdate = exports.DatasetType = exports.ResourceAlreadyExistsException = exports.ResourceInUseException = exports.LimitExceededException = exports.ContentModerationSortBy = exports.ContentModerationAggregateBy = exports.ContentClassifier = exports.InvalidS3ObjectException = exports.InvalidImageFormatException = exports.ImageTooLargeException = exports.OrientationCorrection = exports.QualityFilter = exports.CelebrityRecognitionSortBy = exports.GenderType = exports.KnownGenderType = exports.LandmarkType = exports.EmotionName = exports.ProtectiveEquipmentType = exports.BodyPart = exports.Attribute = exports.ThrottlingException = exports.ServiceQuotaExceededException = exports.ResourceNotFoundException = exports.ProvisionedThroughputExceededException = exports.InvalidParameterException = exports.InternalServerError = exports.IdempotentParameterMismatchException = exports.ConflictException = exports.UserStatus = exports.UnsuccessfulFaceAssociationReason = exports.AccessDeniedException = void 0;
exports.GetFaceLivenessSessionResultsResponseFilterSensitiveLog = exports.AuditImageFilterSensitiveLog = exports.MalformedPolicyDocumentException = exports.LabelDetectionFeatureName = exports.InvalidManifestException = exports.Reason = exports.SegmentType = exports.TechnicalCueType = exports.PersonTrackingSortBy = exports.MediaAnalysisJobStatus = exports.MediaAnalysisJobFailureCode = exports.LabelDetectionSortBy = exports.LabelDetectionAggregateBy = exports.SessionNotFoundException = exports.LivenessSessionStatus = void 0;
const smithy_client_1 = require("@smithy/smithy-client");
const RekognitionServiceException_1 = require("./RekognitionServiceException");
class AccessDeniedException extends RekognitionServiceException_1.RekognitionServiceException {
    constructor(opts) {
        super({
            name: "AccessDeniedException",
            $fault: "client",
            ...opts,
        });
        this.name = "AccessDeniedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, AccessDeniedException.prototype);
        this.Message = opts.Message;
        this.Code = opts.Code;
        this.Logref = opts.Logref;
    }
}
exports.AccessDeniedException = AccessDeniedException;
exports.UnsuccessfulFaceAssociationReason = {
    ASSOCIATED_TO_A_DIFFERENT_USER: "ASSOCIATED_TO_A_DIFFERENT_USER",
    FACE_NOT_FOUND: "FACE_NOT_FOUND",
    LOW_MATCH_CONFIDENCE: "LOW_MATCH_CONFIDENCE",
};
exports.UserStatus = {
    ACTIVE: "ACTIVE",
    CREATED: "CREATED",
    CREATING: "CREATING",
    UPDATING: "UPDATING",
};
class ConflictException extends RekognitionServiceException_1.RekognitionServiceException {
    constructor(opts) {
        super({
            name: "ConflictException",
            $fault: "client",
            ...opts,
        });
        this.name = "ConflictException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ConflictException.prototype);
        this.Message = opts.Message;
        this.Code = opts.Code;
        this.Logref = opts.Logref;
    }
}
exports.ConflictException = ConflictException;
class IdempotentParameterMismatchException extends RekognitionServiceException_1.RekognitionServiceException {
    constructor(opts) {
        super({
            name: "IdempotentParameterMismatchException",
            $fault: "client",
            ...opts,
        });
        this.name = "IdempotentParameterMismatchException";
        this.$fault = "client";
        Object.setPrototypeOf(this, IdempotentParameterMismatchException.prototype);
        this.Message = opts.Message;
        this.Code = opts.Code;
        this.Logref = opts.Logref;
    }
}
exports.IdempotentParameterMismatchException = IdempotentParameterMismatchException;
class InternalServerError extends RekognitionServiceException_1.RekognitionServiceException {
    constructor(opts) {
        super({
            name: "InternalServerError",
            $fault: "server",
            ...opts,
        });
        this.name = "InternalServerError";
        this.$fault = "server";
        Object.setPrototypeOf(this, InternalServerError.prototype);
        this.Message = opts.Message;
        this.Code = opts.Code;
        this.Logref = opts.Logref;
    }
}
exports.InternalServerError = InternalServerError;
class InvalidParameterException extends RekognitionServiceException_1.RekognitionServiceException {
    constructor(opts) {
        super({
            name: "InvalidParameterException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidParameterException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidParameterException.prototype);
        this.Message = opts.Message;
        this.Code = opts.Code;
        this.Logref = opts.Logref;
    }
}
exports.InvalidParameterException = InvalidParameterException;
class ProvisionedThroughputExceededException extends RekognitionServiceException_1.RekognitionServiceException {
    constructor(opts) {
        super({
            name: "ProvisionedThroughputExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "ProvisionedThroughputExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ProvisionedThroughputExceededException.prototype);
        this.Message = opts.Message;
        this.Code = opts.Code;
        this.Logref = opts.Logref;
    }
}
exports.ProvisionedThroughputExceededException = ProvisionedThroughputExceededException;
class ResourceNotFoundException extends RekognitionServiceException_1.RekognitionServiceException {
    constructor(opts) {
        super({
            name: "ResourceNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourceNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceNotFoundException.prototype);
        this.Message = opts.Message;
        this.Code = opts.Code;
        this.Logref = opts.Logref;
    }
}
exports.ResourceNotFoundException = ResourceNotFoundException;
class ServiceQuotaExceededException extends RekognitionServiceException_1.RekognitionServiceException {
    constructor(opts) {
        super({
            name: "ServiceQuotaExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "ServiceQuotaExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ServiceQuotaExceededException.prototype);
        this.Message = opts.Message;
        this.Code = opts.Code;
        this.Logref = opts.Logref;
    }
}
exports.ServiceQuotaExceededException = ServiceQuotaExceededException;
class ThrottlingException extends RekognitionServiceException_1.RekognitionServiceException {
    constructor(opts) {
        super({
            name: "ThrottlingException",
            $fault: "server",
            ...opts,
        });
        this.name = "ThrottlingException";
        this.$fault = "server";
        Object.setPrototypeOf(this, ThrottlingException.prototype);
        this.Message = opts.Message;
        this.Code = opts.Code;
        this.Logref = opts.Logref;
    }
}
exports.ThrottlingException = ThrottlingException;
exports.Attribute = {
    AGE_RANGE: "AGE_RANGE",
    ALL: "ALL",
    BEARD: "BEARD",
    DEFAULT: "DEFAULT",
    EMOTIONS: "EMOTIONS",
    EYEGLASSES: "EYEGLASSES",
    EYES_OPEN: "EYES_OPEN",
    EYE_DIRECTION: "EYE_DIRECTION",
    FACE_OCCLUDED: "FACE_OCCLUDED",
    GENDER: "GENDER",
    MOUTH_OPEN: "MOUTH_OPEN",
    MUSTACHE: "MUSTACHE",
    SMILE: "SMILE",
    SUNGLASSES: "SUNGLASSES",
};
exports.BodyPart = {
    FACE: "FACE",
    HEAD: "HEAD",
    LEFT_HAND: "LEFT_HAND",
    RIGHT_HAND: "RIGHT_HAND",
};
exports.ProtectiveEquipmentType = {
    FACE_COVER: "FACE_COVER",
    HAND_COVER: "HAND_COVER",
    HEAD_COVER: "HEAD_COVER",
};
exports.EmotionName = {
    ANGRY: "ANGRY",
    CALM: "CALM",
    CONFUSED: "CONFUSED",
    DISGUSTED: "DISGUSTED",
    FEAR: "FEAR",
    HAPPY: "HAPPY",
    SAD: "SAD",
    SURPRISED: "SURPRISED",
    UNKNOWN: "UNKNOWN",
};
exports.LandmarkType = {
    chinBottom: "chinBottom",
    eyeLeft: "eyeLeft",
    eyeRight: "eyeRight",
    leftEyeBrowLeft: "leftEyeBrowLeft",
    leftEyeBrowRight: "leftEyeBrowRight",
    leftEyeBrowUp: "leftEyeBrowUp",
    leftEyeDown: "leftEyeDown",
    leftEyeLeft: "leftEyeLeft",
    leftEyeRight: "leftEyeRight",
    leftEyeUp: "leftEyeUp",
    leftPupil: "leftPupil",
    midJawlineLeft: "midJawlineLeft",
    midJawlineRight: "midJawlineRight",
    mouthDown: "mouthDown",
    mouthLeft: "mouthLeft",
    mouthRight: "mouthRight",
    mouthUp: "mouthUp",
    nose: "nose",
    noseLeft: "noseLeft",
    noseRight: "noseRight",
    rightEyeBrowLeft: "rightEyeBrowLeft",
    rightEyeBrowRight: "rightEyeBrowRight",
    rightEyeBrowUp: "rightEyeBrowUp",
    rightEyeDown: "rightEyeDown",
    rightEyeLeft: "rightEyeLeft",
    rightEyeRight: "rightEyeRight",
    rightEyeUp: "rightEyeUp",
    rightPupil: "rightPupil",
    upperJawlineLeft: "upperJawlineLeft",
    upperJawlineRight: "upperJawlineRight",
};
exports.KnownGenderType = {
    Female: "Female",
    Male: "Male",
    Nonbinary: "Nonbinary",
    Unlisted: "Unlisted",
};
exports.GenderType = {
    Female: "Female",
    Male: "Male",
};
exports.CelebrityRecognitionSortBy = {
    ID: "ID",
    TIMESTAMP: "TIMESTAMP",
};
exports.QualityFilter = {
    AUTO: "AUTO",
    HIGH: "HIGH",
    LOW: "LOW",
    MEDIUM: "MEDIUM",
    NONE: "NONE",
};
exports.OrientationCorrection = {
    ROTATE_0: "ROTATE_0",
    ROTATE_180: "ROTATE_180",
    ROTATE_270: "ROTATE_270",
    ROTATE_90: "ROTATE_90",
};
class ImageTooLargeException extends RekognitionServiceException_1.RekognitionServiceException {
    constructor(opts) {
        super({
            name: "ImageTooLargeException",
            $fault: "client",
            ...opts,
        });
        this.name = "ImageTooLargeException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ImageTooLargeException.prototype);
        this.Message = opts.Message;
        this.Code = opts.Code;
        this.Logref = opts.Logref;
    }
}
exports.ImageTooLargeException = ImageTooLargeException;
class InvalidImageFormatException extends RekognitionServiceException_1.RekognitionServiceException {
    constructor(opts) {
        super({
            name: "InvalidImageFormatException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidImageFormatException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidImageFormatException.prototype);
        this.Message = opts.Message;
        this.Code = opts.Code;
        this.Logref = opts.Logref;
    }
}
exports.InvalidImageFormatException = InvalidImageFormatException;
class InvalidS3ObjectException extends RekognitionServiceException_1.RekognitionServiceException {
    constructor(opts) {
        super({
            name: "InvalidS3ObjectException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidS3ObjectException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidS3ObjectException.prototype);
        this.Message = opts.Message;
        this.Code = opts.Code;
        this.Logref = opts.Logref;
    }
}
exports.InvalidS3ObjectException = InvalidS3ObjectException;
exports.ContentClassifier = {
    FREE_OF_ADULT_CONTENT: "FreeOfAdultContent",
    FREE_OF_PERSONALLY_IDENTIFIABLE_INFORMATION: "FreeOfPersonallyIdentifiableInformation",
};
exports.ContentModerationAggregateBy = {
    SEGMENTS: "SEGMENTS",
    TIMESTAMPS: "TIMESTAMPS",
};
exports.ContentModerationSortBy = {
    NAME: "NAME",
    TIMESTAMP: "TIMESTAMP",
};
class LimitExceededException extends RekognitionServiceException_1.RekognitionServiceException {
    constructor(opts) {
        super({
            name: "LimitExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "LimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, LimitExceededException.prototype);
        this.Message = opts.Message;
        this.Code = opts.Code;
        this.Logref = opts.Logref;
    }
}
exports.LimitExceededException = LimitExceededException;
class ResourceInUseException extends RekognitionServiceException_1.RekognitionServiceException {
    constructor(opts) {
        super({
            name: "ResourceInUseException",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourceInUseException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceInUseException.prototype);
        this.Message = opts.Message;
        this.Code = opts.Code;
        this.Logref = opts.Logref;
    }
}
exports.ResourceInUseException = ResourceInUseException;
class ResourceAlreadyExistsException extends RekognitionServiceException_1.RekognitionServiceException {
    constructor(opts) {
        super({
            name: "ResourceAlreadyExistsException",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourceAlreadyExistsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceAlreadyExistsException.prototype);
        this.Message = opts.Message;
        this.Code = opts.Code;
        this.Logref = opts.Logref;
    }
}
exports.ResourceAlreadyExistsException = ResourceAlreadyExistsException;
exports.DatasetType = {
    TEST: "TEST",
    TRAIN: "TRAIN",
};
exports.ProjectAutoUpdate = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
};
exports.CustomizationFeature = {
    CONTENT_MODERATION: "CONTENT_MODERATION",
    CUSTOM_LABELS: "CUSTOM_LABELS",
};
exports.DatasetStatus = {
    CREATE_COMPLETE: "CREATE_COMPLETE",
    CREATE_FAILED: "CREATE_FAILED",
    CREATE_IN_PROGRESS: "CREATE_IN_PROGRESS",
    DELETE_IN_PROGRESS: "DELETE_IN_PROGRESS",
    UPDATE_COMPLETE: "UPDATE_COMPLETE",
    UPDATE_FAILED: "UPDATE_FAILED",
    UPDATE_IN_PROGRESS: "UPDATE_IN_PROGRESS",
};
exports.DatasetStatusMessageCode = {
    CLIENT_ERROR: "CLIENT_ERROR",
    SERVICE_ERROR: "SERVICE_ERROR",
    SUCCESS: "SUCCESS",
};
exports.UnsuccessfulFaceDeletionReason = {
    ASSOCIATED_TO_AN_EXISTING_USER: "ASSOCIATED_TO_AN_EXISTING_USER",
    FACE_NOT_FOUND: "FACE_NOT_FOUND",
};
exports.ProjectStatus = {
    CREATED: "CREATED",
    CREATING: "CREATING",
    DELETING: "DELETING",
};
class InvalidPolicyRevisionIdException extends RekognitionServiceException_1.RekognitionServiceException {
    constructor(opts) {
        super({
            name: "InvalidPolicyRevisionIdException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidPolicyRevisionIdException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidPolicyRevisionIdException.prototype);
        this.Message = opts.Message;
        this.Code = opts.Code;
        this.Logref = opts.Logref;
    }
}
exports.InvalidPolicyRevisionIdException = InvalidPolicyRevisionIdException;
exports.ProjectVersionStatus = {
    COPYING_COMPLETED: "COPYING_COMPLETED",
    COPYING_FAILED: "COPYING_FAILED",
    COPYING_IN_PROGRESS: "COPYING_IN_PROGRESS",
    DELETING: "DELETING",
    DEPRECATED: "DEPRECATED",
    EXPIRED: "EXPIRED",
    FAILED: "FAILED",
    RUNNING: "RUNNING",
    STARTING: "STARTING",
    STOPPED: "STOPPED",
    STOPPING: "STOPPING",
    TRAINING_COMPLETED: "TRAINING_COMPLETED",
    TRAINING_FAILED: "TRAINING_FAILED",
    TRAINING_IN_PROGRESS: "TRAINING_IN_PROGRESS",
};
class InvalidPaginationTokenException extends RekognitionServiceException_1.RekognitionServiceException {
    constructor(opts) {
        super({
            name: "InvalidPaginationTokenException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidPaginationTokenException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidPaginationTokenException.prototype);
        this.Message = opts.Message;
        this.Code = opts.Code;
        this.Logref = opts.Logref;
    }
}
exports.InvalidPaginationTokenException = InvalidPaginationTokenException;
exports.StreamProcessorStatus = {
    FAILED: "FAILED",
    RUNNING: "RUNNING",
    STARTING: "STARTING",
    STOPPED: "STOPPED",
    STOPPING: "STOPPING",
    UPDATING: "UPDATING",
};
class ResourceNotReadyException extends RekognitionServiceException_1.RekognitionServiceException {
    constructor(opts) {
        super({
            name: "ResourceNotReadyException",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourceNotReadyException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceNotReadyException.prototype);
        this.Message = opts.Message;
        this.Code = opts.Code;
        this.Logref = opts.Logref;
    }
}
exports.ResourceNotReadyException = ResourceNotReadyException;
exports.DetectLabelsFeatureName = {
    GENERAL_LABELS: "GENERAL_LABELS",
    IMAGE_PROPERTIES: "IMAGE_PROPERTIES",
};
class HumanLoopQuotaExceededException extends RekognitionServiceException_1.RekognitionServiceException {
    constructor(opts) {
        super({
            name: "HumanLoopQuotaExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "HumanLoopQuotaExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, HumanLoopQuotaExceededException.prototype);
        this.ResourceType = opts.ResourceType;
        this.QuotaCode = opts.QuotaCode;
        this.ServiceCode = opts.ServiceCode;
        this.Message = opts.Message;
        this.Code = opts.Code;
        this.Logref = opts.Logref;
    }
}
exports.HumanLoopQuotaExceededException = HumanLoopQuotaExceededException;
exports.TextTypes = {
    LINE: "LINE",
    WORD: "WORD",
};
exports.UnsuccessfulFaceDisassociationReason = {
    ASSOCIATED_TO_A_DIFFERENT_USER: "ASSOCIATED_TO_A_DIFFERENT_USER",
    FACE_NOT_FOUND: "FACE_NOT_FOUND",
};
exports.FaceAttributes = {
    ALL: "ALL",
    DEFAULT: "DEFAULT",
};
exports.FaceSearchSortBy = {
    INDEX: "INDEX",
    TIMESTAMP: "TIMESTAMP",
};
exports.VideoJobStatus = {
    FAILED: "FAILED",
    IN_PROGRESS: "IN_PROGRESS",
    SUCCEEDED: "SUCCEEDED",
};
exports.VideoColorRange = {
    FULL: "FULL",
    LIMITED: "LIMITED",
};
exports.LivenessSessionStatus = {
    CREATED: "CREATED",
    EXPIRED: "EXPIRED",
    FAILED: "FAILED",
    IN_PROGRESS: "IN_PROGRESS",
    SUCCEEDED: "SUCCEEDED",
};
class SessionNotFoundException extends RekognitionServiceException_1.RekognitionServiceException {
    constructor(opts) {
        super({
            name: "SessionNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "SessionNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, SessionNotFoundException.prototype);
        this.Message = opts.Message;
        this.Code = opts.Code;
        this.Logref = opts.Logref;
    }
}
exports.SessionNotFoundException = SessionNotFoundException;
exports.LabelDetectionAggregateBy = {
    SEGMENTS: "SEGMENTS",
    TIMESTAMPS: "TIMESTAMPS",
};
exports.LabelDetectionSortBy = {
    NAME: "NAME",
    TIMESTAMP: "TIMESTAMP",
};
exports.MediaAnalysisJobFailureCode = {
    ACCESS_DENIED: "ACCESS_DENIED",
    INTERNAL_ERROR: "INTERNAL_ERROR",
    INVALID_KMS_KEY: "INVALID_KMS_KEY",
    INVALID_MANIFEST: "INVALID_MANIFEST",
    INVALID_OUTPUT_CONFIG: "INVALID_OUTPUT_CONFIG",
    INVALID_S3_OBJECT: "INVALID_S3_OBJECT",
    RESOURCE_NOT_FOUND: "RESOURCE_NOT_FOUND",
    RESOURCE_NOT_READY: "RESOURCE_NOT_READY",
    THROTTLED: "THROTTLED",
};
exports.MediaAnalysisJobStatus = {
    CREATED: "CREATED",
    FAILED: "FAILED",
    IN_PROGRESS: "IN_PROGRESS",
    QUEUED: "QUEUED",
    SUCCEEDED: "SUCCEEDED",
};
exports.PersonTrackingSortBy = {
    INDEX: "INDEX",
    TIMESTAMP: "TIMESTAMP",
};
exports.TechnicalCueType = {
    BLACK_FRAMES: "BlackFrames",
    COLOR_BARS: "ColorBars",
    CONTENT: "Content",
    END_CREDITS: "EndCredits",
    OPENING_CREDITS: "OpeningCredits",
    SLATE: "Slate",
    STUDIO_LOGO: "StudioLogo",
};
exports.SegmentType = {
    SHOT: "SHOT",
    TECHNICAL_CUE: "TECHNICAL_CUE",
};
exports.Reason = {
    EXCEEDS_MAX_FACES: "EXCEEDS_MAX_FACES",
    EXTREME_POSE: "EXTREME_POSE",
    LOW_BRIGHTNESS: "LOW_BRIGHTNESS",
    LOW_CONFIDENCE: "LOW_CONFIDENCE",
    LOW_FACE_QUALITY: "LOW_FACE_QUALITY",
    LOW_SHARPNESS: "LOW_SHARPNESS",
    SMALL_BOUNDING_BOX: "SMALL_BOUNDING_BOX",
};
class InvalidManifestException extends RekognitionServiceException_1.RekognitionServiceException {
    constructor(opts) {
        super({
            name: "InvalidManifestException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidManifestException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidManifestException.prototype);
        this.Message = opts.Message;
        this.Code = opts.Code;
        this.Logref = opts.Logref;
    }
}
exports.InvalidManifestException = InvalidManifestException;
exports.LabelDetectionFeatureName = {
    GENERAL_LABELS: "GENERAL_LABELS",
};
class MalformedPolicyDocumentException extends RekognitionServiceException_1.RekognitionServiceException {
    constructor(opts) {
        super({
            name: "MalformedPolicyDocumentException",
            $fault: "client",
            ...opts,
        });
        this.name = "MalformedPolicyDocumentException";
        this.$fault = "client";
        Object.setPrototypeOf(this, MalformedPolicyDocumentException.prototype);
        this.Message = opts.Message;
        this.Code = opts.Code;
        this.Logref = opts.Logref;
    }
}
exports.MalformedPolicyDocumentException = MalformedPolicyDocumentException;
const AuditImageFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Bytes && { Bytes: smithy_client_1.SENSITIVE_STRING }),
});
exports.AuditImageFilterSensitiveLog = AuditImageFilterSensitiveLog;
const GetFaceLivenessSessionResultsResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.ReferenceImage && { ReferenceImage: (0, exports.AuditImageFilterSensitiveLog)(obj.ReferenceImage) }),
    ...(obj.AuditImages && { AuditImages: obj.AuditImages.map((item) => (0, exports.AuditImageFilterSensitiveLog)(item)) }),
});
exports.GetFaceLivenessSessionResultsResponseFilterSensitiveLog = GetFaceLivenessSessionResultsResponseFilterSensitiveLog;
