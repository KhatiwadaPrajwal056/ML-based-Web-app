import { SENSITIVE_STRING, } from "@smithy/smithy-client";
import { RekognitionServiceException as __BaseException } from "./RekognitionServiceException";
export class AccessDeniedException extends __BaseException {
    constructor(opts) {
        super({
            name: "AccessDeniedException",
            $fault: "client",
            ...opts,
        });
        this.name = "AccessDeniedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, AccessDeniedException.prototype);
        this.Message = opts.Message;
        this.Code = opts.Code;
        this.Logref = opts.Logref;
    }
}
export const UnsuccessfulFaceAssociationReason = {
    ASSOCIATED_TO_A_DIFFERENT_USER: "ASSOCIATED_TO_A_DIFFERENT_USER",
    FACE_NOT_FOUND: "FACE_NOT_FOUND",
    LOW_MATCH_CONFIDENCE: "LOW_MATCH_CONFIDENCE",
};
export const UserStatus = {
    ACTIVE: "ACTIVE",
    CREATED: "CREATED",
    CREATING: "CREATING",
    UPDATING: "UPDATING",
};
export class ConflictException extends __BaseException {
    constructor(opts) {
        super({
            name: "ConflictException",
            $fault: "client",
            ...opts,
        });
        this.name = "ConflictException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ConflictException.prototype);
        this.Message = opts.Message;
        this.Code = opts.Code;
        this.Logref = opts.Logref;
    }
}
export class IdempotentParameterMismatchException extends __BaseException {
    constructor(opts) {
        super({
            name: "IdempotentParameterMismatchException",
            $fault: "client",
            ...opts,
        });
        this.name = "IdempotentParameterMismatchException";
        this.$fault = "client";
        Object.setPrototypeOf(this, IdempotentParameterMismatchException.prototype);
        this.Message = opts.Message;
        this.Code = opts.Code;
        this.Logref = opts.Logref;
    }
}
export class InternalServerError extends __BaseException {
    constructor(opts) {
        super({
            name: "InternalServerError",
            $fault: "server",
            ...opts,
        });
        this.name = "InternalServerError";
        this.$fault = "server";
        Object.setPrototypeOf(this, InternalServerError.prototype);
        this.Message = opts.Message;
        this.Code = opts.Code;
        this.Logref = opts.Logref;
    }
}
export class InvalidParameterException extends __BaseException {
    constructor(opts) {
        super({
            name: "InvalidParameterException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidParameterException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidParameterException.prototype);
        this.Message = opts.Message;
        this.Code = opts.Code;
        this.Logref = opts.Logref;
    }
}
export class ProvisionedThroughputExceededException extends __BaseException {
    constructor(opts) {
        super({
            name: "ProvisionedThroughputExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "ProvisionedThroughputExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ProvisionedThroughputExceededException.prototype);
        this.Message = opts.Message;
        this.Code = opts.Code;
        this.Logref = opts.Logref;
    }
}
export class ResourceNotFoundException extends __BaseException {
    constructor(opts) {
        super({
            name: "ResourceNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourceNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceNotFoundException.prototype);
        this.Message = opts.Message;
        this.Code = opts.Code;
        this.Logref = opts.Logref;
    }
}
export class ServiceQuotaExceededException extends __BaseException {
    constructor(opts) {
        super({
            name: "ServiceQuotaExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "ServiceQuotaExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ServiceQuotaExceededException.prototype);
        this.Message = opts.Message;
        this.Code = opts.Code;
        this.Logref = opts.Logref;
    }
}
export class ThrottlingException extends __BaseException {
    constructor(opts) {
        super({
            name: "ThrottlingException",
            $fault: "server",
            ...opts,
        });
        this.name = "ThrottlingException";
        this.$fault = "server";
        Object.setPrototypeOf(this, ThrottlingException.prototype);
        this.Message = opts.Message;
        this.Code = opts.Code;
        this.Logref = opts.Logref;
    }
}
export const Attribute = {
    AGE_RANGE: "AGE_RANGE",
    ALL: "ALL",
    BEARD: "BEARD",
    DEFAULT: "DEFAULT",
    EMOTIONS: "EMOTIONS",
    EYEGLASSES: "EYEGLASSES",
    EYES_OPEN: "EYES_OPEN",
    EYE_DIRECTION: "EYE_DIRECTION",
    FACE_OCCLUDED: "FACE_OCCLUDED",
    GENDER: "GENDER",
    MOUTH_OPEN: "MOUTH_OPEN",
    MUSTACHE: "MUSTACHE",
    SMILE: "SMILE",
    SUNGLASSES: "SUNGLASSES",
};
export const BodyPart = {
    FACE: "FACE",
    HEAD: "HEAD",
    LEFT_HAND: "LEFT_HAND",
    RIGHT_HAND: "RIGHT_HAND",
};
export const ProtectiveEquipmentType = {
    FACE_COVER: "FACE_COVER",
    HAND_COVER: "HAND_COVER",
    HEAD_COVER: "HEAD_COVER",
};
export const EmotionName = {
    ANGRY: "ANGRY",
    CALM: "CALM",
    CONFUSED: "CONFUSED",
    DISGUSTED: "DISGUSTED",
    FEAR: "FEAR",
    HAPPY: "HAPPY",
    SAD: "SAD",
    SURPRISED: "SURPRISED",
    UNKNOWN: "UNKNOWN",
};
export const LandmarkType = {
    chinBottom: "chinBottom",
    eyeLeft: "eyeLeft",
    eyeRight: "eyeRight",
    leftEyeBrowLeft: "leftEyeBrowLeft",
    leftEyeBrowRight: "leftEyeBrowRight",
    leftEyeBrowUp: "leftEyeBrowUp",
    leftEyeDown: "leftEyeDown",
    leftEyeLeft: "leftEyeLeft",
    leftEyeRight: "leftEyeRight",
    leftEyeUp: "leftEyeUp",
    leftPupil: "leftPupil",
    midJawlineLeft: "midJawlineLeft",
    midJawlineRight: "midJawlineRight",
    mouthDown: "mouthDown",
    mouthLeft: "mouthLeft",
    mouthRight: "mouthRight",
    mouthUp: "mouthUp",
    nose: "nose",
    noseLeft: "noseLeft",
    noseRight: "noseRight",
    rightEyeBrowLeft: "rightEyeBrowLeft",
    rightEyeBrowRight: "rightEyeBrowRight",
    rightEyeBrowUp: "rightEyeBrowUp",
    rightEyeDown: "rightEyeDown",
    rightEyeLeft: "rightEyeLeft",
    rightEyeRight: "rightEyeRight",
    rightEyeUp: "rightEyeUp",
    rightPupil: "rightPupil",
    upperJawlineLeft: "upperJawlineLeft",
    upperJawlineRight: "upperJawlineRight",
};
export const KnownGenderType = {
    Female: "Female",
    Male: "Male",
    Nonbinary: "Nonbinary",
    Unlisted: "Unlisted",
};
export const GenderType = {
    Female: "Female",
    Male: "Male",
};
export const CelebrityRecognitionSortBy = {
    ID: "ID",
    TIMESTAMP: "TIMESTAMP",
};
export const QualityFilter = {
    AUTO: "AUTO",
    HIGH: "HIGH",
    LOW: "LOW",
    MEDIUM: "MEDIUM",
    NONE: "NONE",
};
export const OrientationCorrection = {
    ROTATE_0: "ROTATE_0",
    ROTATE_180: "ROTATE_180",
    ROTATE_270: "ROTATE_270",
    ROTATE_90: "ROTATE_90",
};
export class ImageTooLargeException extends __BaseException {
    constructor(opts) {
        super({
            name: "ImageTooLargeException",
            $fault: "client",
            ...opts,
        });
        this.name = "ImageTooLargeException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ImageTooLargeException.prototype);
        this.Message = opts.Message;
        this.Code = opts.Code;
        this.Logref = opts.Logref;
    }
}
export class InvalidImageFormatException extends __BaseException {
    constructor(opts) {
        super({
            name: "InvalidImageFormatException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidImageFormatException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidImageFormatException.prototype);
        this.Message = opts.Message;
        this.Code = opts.Code;
        this.Logref = opts.Logref;
    }
}
export class InvalidS3ObjectException extends __BaseException {
    constructor(opts) {
        super({
            name: "InvalidS3ObjectException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidS3ObjectException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidS3ObjectException.prototype);
        this.Message = opts.Message;
        this.Code = opts.Code;
        this.Logref = opts.Logref;
    }
}
export const ContentClassifier = {
    FREE_OF_ADULT_CONTENT: "FreeOfAdultContent",
    FREE_OF_PERSONALLY_IDENTIFIABLE_INFORMATION: "FreeOfPersonallyIdentifiableInformation",
};
export const ContentModerationAggregateBy = {
    SEGMENTS: "SEGMENTS",
    TIMESTAMPS: "TIMESTAMPS",
};
export const ContentModerationSortBy = {
    NAME: "NAME",
    TIMESTAMP: "TIMESTAMP",
};
export class LimitExceededException extends __BaseException {
    constructor(opts) {
        super({
            name: "LimitExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "LimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, LimitExceededException.prototype);
        this.Message = opts.Message;
        this.Code = opts.Code;
        this.Logref = opts.Logref;
    }
}
export class ResourceInUseException extends __BaseException {
    constructor(opts) {
        super({
            name: "ResourceInUseException",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourceInUseException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceInUseException.prototype);
        this.Message = opts.Message;
        this.Code = opts.Code;
        this.Logref = opts.Logref;
    }
}
export class ResourceAlreadyExistsException extends __BaseException {
    constructor(opts) {
        super({
            name: "ResourceAlreadyExistsException",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourceAlreadyExistsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceAlreadyExistsException.prototype);
        this.Message = opts.Message;
        this.Code = opts.Code;
        this.Logref = opts.Logref;
    }
}
export const DatasetType = {
    TEST: "TEST",
    TRAIN: "TRAIN",
};
export const ProjectAutoUpdate = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
};
export const CustomizationFeature = {
    CONTENT_MODERATION: "CONTENT_MODERATION",
    CUSTOM_LABELS: "CUSTOM_LABELS",
};
export const DatasetStatus = {
    CREATE_COMPLETE: "CREATE_COMPLETE",
    CREATE_FAILED: "CREATE_FAILED",
    CREATE_IN_PROGRESS: "CREATE_IN_PROGRESS",
    DELETE_IN_PROGRESS: "DELETE_IN_PROGRESS",
    UPDATE_COMPLETE: "UPDATE_COMPLETE",
    UPDATE_FAILED: "UPDATE_FAILED",
    UPDATE_IN_PROGRESS: "UPDATE_IN_PROGRESS",
};
export const DatasetStatusMessageCode = {
    CLIENT_ERROR: "CLIENT_ERROR",
    SERVICE_ERROR: "SERVICE_ERROR",
    SUCCESS: "SUCCESS",
};
export const UnsuccessfulFaceDeletionReason = {
    ASSOCIATED_TO_AN_EXISTING_USER: "ASSOCIATED_TO_AN_EXISTING_USER",
    FACE_NOT_FOUND: "FACE_NOT_FOUND",
};
export const ProjectStatus = {
    CREATED: "CREATED",
    CREATING: "CREATING",
    DELETING: "DELETING",
};
export class InvalidPolicyRevisionIdException extends __BaseException {
    constructor(opts) {
        super({
            name: "InvalidPolicyRevisionIdException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidPolicyRevisionIdException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidPolicyRevisionIdException.prototype);
        this.Message = opts.Message;
        this.Code = opts.Code;
        this.Logref = opts.Logref;
    }
}
export const ProjectVersionStatus = {
    COPYING_COMPLETED: "COPYING_COMPLETED",
    COPYING_FAILED: "COPYING_FAILED",
    COPYING_IN_PROGRESS: "COPYING_IN_PROGRESS",
    DELETING: "DELETING",
    DEPRECATED: "DEPRECATED",
    EXPIRED: "EXPIRED",
    FAILED: "FAILED",
    RUNNING: "RUNNING",
    STARTING: "STARTING",
    STOPPED: "STOPPED",
    STOPPING: "STOPPING",
    TRAINING_COMPLETED: "TRAINING_COMPLETED",
    TRAINING_FAILED: "TRAINING_FAILED",
    TRAINING_IN_PROGRESS: "TRAINING_IN_PROGRESS",
};
export class InvalidPaginationTokenException extends __BaseException {
    constructor(opts) {
        super({
            name: "InvalidPaginationTokenException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidPaginationTokenException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidPaginationTokenException.prototype);
        this.Message = opts.Message;
        this.Code = opts.Code;
        this.Logref = opts.Logref;
    }
}
export const StreamProcessorStatus = {
    FAILED: "FAILED",
    RUNNING: "RUNNING",
    STARTING: "STARTING",
    STOPPED: "STOPPED",
    STOPPING: "STOPPING",
    UPDATING: "UPDATING",
};
export class ResourceNotReadyException extends __BaseException {
    constructor(opts) {
        super({
            name: "ResourceNotReadyException",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourceNotReadyException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceNotReadyException.prototype);
        this.Message = opts.Message;
        this.Code = opts.Code;
        this.Logref = opts.Logref;
    }
}
export const DetectLabelsFeatureName = {
    GENERAL_LABELS: "GENERAL_LABELS",
    IMAGE_PROPERTIES: "IMAGE_PROPERTIES",
};
export class HumanLoopQuotaExceededException extends __BaseException {
    constructor(opts) {
        super({
            name: "HumanLoopQuotaExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "HumanLoopQuotaExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, HumanLoopQuotaExceededException.prototype);
        this.ResourceType = opts.ResourceType;
        this.QuotaCode = opts.QuotaCode;
        this.ServiceCode = opts.ServiceCode;
        this.Message = opts.Message;
        this.Code = opts.Code;
        this.Logref = opts.Logref;
    }
}
export const TextTypes = {
    LINE: "LINE",
    WORD: "WORD",
};
export const UnsuccessfulFaceDisassociationReason = {
    ASSOCIATED_TO_A_DIFFERENT_USER: "ASSOCIATED_TO_A_DIFFERENT_USER",
    FACE_NOT_FOUND: "FACE_NOT_FOUND",
};
export const FaceAttributes = {
    ALL: "ALL",
    DEFAULT: "DEFAULT",
};
export const FaceSearchSortBy = {
    INDEX: "INDEX",
    TIMESTAMP: "TIMESTAMP",
};
export const VideoJobStatus = {
    FAILED: "FAILED",
    IN_PROGRESS: "IN_PROGRESS",
    SUCCEEDED: "SUCCEEDED",
};
export const VideoColorRange = {
    FULL: "FULL",
    LIMITED: "LIMITED",
};
export const LivenessSessionStatus = {
    CREATED: "CREATED",
    EXPIRED: "EXPIRED",
    FAILED: "FAILED",
    IN_PROGRESS: "IN_PROGRESS",
    SUCCEEDED: "SUCCEEDED",
};
export class SessionNotFoundException extends __BaseException {
    constructor(opts) {
        super({
            name: "SessionNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "SessionNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, SessionNotFoundException.prototype);
        this.Message = opts.Message;
        this.Code = opts.Code;
        this.Logref = opts.Logref;
    }
}
export const LabelDetectionAggregateBy = {
    SEGMENTS: "SEGMENTS",
    TIMESTAMPS: "TIMESTAMPS",
};
export const LabelDetectionSortBy = {
    NAME: "NAME",
    TIMESTAMP: "TIMESTAMP",
};
export const MediaAnalysisJobFailureCode = {
    ACCESS_DENIED: "ACCESS_DENIED",
    INTERNAL_ERROR: "INTERNAL_ERROR",
    INVALID_KMS_KEY: "INVALID_KMS_KEY",
    INVALID_MANIFEST: "INVALID_MANIFEST",
    INVALID_OUTPUT_CONFIG: "INVALID_OUTPUT_CONFIG",
    INVALID_S3_OBJECT: "INVALID_S3_OBJECT",
    RESOURCE_NOT_FOUND: "RESOURCE_NOT_FOUND",
    RESOURCE_NOT_READY: "RESOURCE_NOT_READY",
    THROTTLED: "THROTTLED",
};
export const MediaAnalysisJobStatus = {
    CREATED: "CREATED",
    FAILED: "FAILED",
    IN_PROGRESS: "IN_PROGRESS",
    QUEUED: "QUEUED",
    SUCCEEDED: "SUCCEEDED",
};
export const PersonTrackingSortBy = {
    INDEX: "INDEX",
    TIMESTAMP: "TIMESTAMP",
};
export const TechnicalCueType = {
    BLACK_FRAMES: "BlackFrames",
    COLOR_BARS: "ColorBars",
    CONTENT: "Content",
    END_CREDITS: "EndCredits",
    OPENING_CREDITS: "OpeningCredits",
    SLATE: "Slate",
    STUDIO_LOGO: "StudioLogo",
};
export const SegmentType = {
    SHOT: "SHOT",
    TECHNICAL_CUE: "TECHNICAL_CUE",
};
export const Reason = {
    EXCEEDS_MAX_FACES: "EXCEEDS_MAX_FACES",
    EXTREME_POSE: "EXTREME_POSE",
    LOW_BRIGHTNESS: "LOW_BRIGHTNESS",
    LOW_CONFIDENCE: "LOW_CONFIDENCE",
    LOW_FACE_QUALITY: "LOW_FACE_QUALITY",
    LOW_SHARPNESS: "LOW_SHARPNESS",
    SMALL_BOUNDING_BOX: "SMALL_BOUNDING_BOX",
};
export class InvalidManifestException extends __BaseException {
    constructor(opts) {
        super({
            name: "InvalidManifestException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidManifestException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidManifestException.prototype);
        this.Message = opts.Message;
        this.Code = opts.Code;
        this.Logref = opts.Logref;
    }
}
export const LabelDetectionFeatureName = {
    GENERAL_LABELS: "GENERAL_LABELS",
};
export class MalformedPolicyDocumentException extends __BaseException {
    constructor(opts) {
        super({
            name: "MalformedPolicyDocumentException",
            $fault: "client",
            ...opts,
        });
        this.name = "MalformedPolicyDocumentException";
        this.$fault = "client";
        Object.setPrototypeOf(this, MalformedPolicyDocumentException.prototype);
        this.Message = opts.Message;
        this.Code = opts.Code;
        this.Logref = opts.Logref;
    }
}
export const AuditImageFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Bytes && { Bytes: SENSITIVE_STRING }),
});
export const GetFaceLivenessSessionResultsResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.ReferenceImage && { ReferenceImage: AuditImageFilterSensitiveLog(obj.ReferenceImage) }),
    ...(obj.AuditImages && { AuditImages: obj.AuditImages.map((item) => AuditImageFilterSensitiveLog(item)) }),
});
