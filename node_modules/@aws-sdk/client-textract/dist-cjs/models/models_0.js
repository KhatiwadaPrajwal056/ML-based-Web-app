"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.InvalidJobIdException = exports.JobStatus = exports.ResourceNotFoundException = exports.InvalidKMSKeyException = exports.ValidationException = exports.ServiceQuotaExceededException = exports.LimitExceededException = exports.IdempotentParameterMismatchException = exports.ConflictException = exports.AutoUpdate = exports.ValueType = exports.UnsupportedDocumentException = exports.ThrottlingException = exports.ProvisionedThroughputExceededException = exports.InvalidS3ObjectException = exports.InvalidParameterException = exports.InternalServerError = exports.HumanLoopQuotaExceededException = exports.DocumentTooLargeException = exports.BadDocumentException = exports.TextType = exports.SelectionStatus = exports.RelationshipType = exports.EntityType = exports.BlockType = exports.ContentClassifier = exports.AdapterVersionStatus = exports.FeatureType = exports.AccessDeniedException = void 0;
const TextractServiceException_1 = require("./TextractServiceException");
class AccessDeniedException extends TextractServiceException_1.TextractServiceException {
    constructor(opts) {
        super({
            name: "AccessDeniedException",
            $fault: "client",
            ...opts,
        });
        this.name = "AccessDeniedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, AccessDeniedException.prototype);
        this.Message = opts.Message;
        this.Code = opts.Code;
    }
}
exports.AccessDeniedException = AccessDeniedException;
exports.FeatureType = {
    FORMS: "FORMS",
    LAYOUT: "LAYOUT",
    QUERIES: "QUERIES",
    SIGNATURES: "SIGNATURES",
    TABLES: "TABLES",
};
exports.AdapterVersionStatus = {
    ACTIVE: "ACTIVE",
    AT_RISK: "AT_RISK",
    CREATION_ERROR: "CREATION_ERROR",
    CREATION_IN_PROGRESS: "CREATION_IN_PROGRESS",
    DEPRECATED: "DEPRECATED",
};
exports.ContentClassifier = {
    FREE_OF_ADULT_CONTENT: "FreeOfAdultContent",
    FREE_OF_PERSONALLY_IDENTIFIABLE_INFORMATION: "FreeOfPersonallyIdentifiableInformation",
};
exports.BlockType = {
    CELL: "CELL",
    KEY_VALUE_SET: "KEY_VALUE_SET",
    LAYOUT_FIGURE: "LAYOUT_FIGURE",
    LAYOUT_FOOTER: "LAYOUT_FOOTER",
    LAYOUT_HEADER: "LAYOUT_HEADER",
    LAYOUT_KEY_VALUE: "LAYOUT_KEY_VALUE",
    LAYOUT_LIST: "LAYOUT_LIST",
    LAYOUT_PAGE_NUMBER: "LAYOUT_PAGE_NUMBER",
    LAYOUT_SECTION_HEADER: "LAYOUT_SECTION_HEADER",
    LAYOUT_TABLE: "LAYOUT_TABLE",
    LAYOUT_TEXT: "LAYOUT_TEXT",
    LAYOUT_TITLE: "LAYOUT_TITLE",
    LINE: "LINE",
    MERGED_CELL: "MERGED_CELL",
    PAGE: "PAGE",
    QUERY: "QUERY",
    QUERY_RESULT: "QUERY_RESULT",
    SELECTION_ELEMENT: "SELECTION_ELEMENT",
    SIGNATURE: "SIGNATURE",
    TABLE: "TABLE",
    TABLE_FOOTER: "TABLE_FOOTER",
    TABLE_TITLE: "TABLE_TITLE",
    TITLE: "TITLE",
    WORD: "WORD",
};
exports.EntityType = {
    COLUMN_HEADER: "COLUMN_HEADER",
    KEY: "KEY",
    SEMI_STRUCTURED_TABLE: "SEMI_STRUCTURED_TABLE",
    STRUCTURED_TABLE: "STRUCTURED_TABLE",
    TABLE_FOOTER: "TABLE_FOOTER",
    TABLE_SECTION_TITLE: "TABLE_SECTION_TITLE",
    TABLE_SUMMARY: "TABLE_SUMMARY",
    TABLE_TITLE: "TABLE_TITLE",
    VALUE: "VALUE",
};
exports.RelationshipType = {
    ANSWER: "ANSWER",
    CHILD: "CHILD",
    COMPLEX_FEATURES: "COMPLEX_FEATURES",
    MERGED_CELL: "MERGED_CELL",
    TABLE: "TABLE",
    TABLE_FOOTER: "TABLE_FOOTER",
    TABLE_TITLE: "TABLE_TITLE",
    TITLE: "TITLE",
    VALUE: "VALUE",
};
exports.SelectionStatus = {
    NOT_SELECTED: "NOT_SELECTED",
    SELECTED: "SELECTED",
};
exports.TextType = {
    HANDWRITING: "HANDWRITING",
    PRINTED: "PRINTED",
};
class BadDocumentException extends TextractServiceException_1.TextractServiceException {
    constructor(opts) {
        super({
            name: "BadDocumentException",
            $fault: "client",
            ...opts,
        });
        this.name = "BadDocumentException";
        this.$fault = "client";
        Object.setPrototypeOf(this, BadDocumentException.prototype);
        this.Message = opts.Message;
        this.Code = opts.Code;
    }
}
exports.BadDocumentException = BadDocumentException;
class DocumentTooLargeException extends TextractServiceException_1.TextractServiceException {
    constructor(opts) {
        super({
            name: "DocumentTooLargeException",
            $fault: "client",
            ...opts,
        });
        this.name = "DocumentTooLargeException";
        this.$fault = "client";
        Object.setPrototypeOf(this, DocumentTooLargeException.prototype);
        this.Message = opts.Message;
        this.Code = opts.Code;
    }
}
exports.DocumentTooLargeException = DocumentTooLargeException;
class HumanLoopQuotaExceededException extends TextractServiceException_1.TextractServiceException {
    constructor(opts) {
        super({
            name: "HumanLoopQuotaExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "HumanLoopQuotaExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, HumanLoopQuotaExceededException.prototype);
        this.ResourceType = opts.ResourceType;
        this.QuotaCode = opts.QuotaCode;
        this.ServiceCode = opts.ServiceCode;
        this.Message = opts.Message;
        this.Code = opts.Code;
    }
}
exports.HumanLoopQuotaExceededException = HumanLoopQuotaExceededException;
class InternalServerError extends TextractServiceException_1.TextractServiceException {
    constructor(opts) {
        super({
            name: "InternalServerError",
            $fault: "server",
            ...opts,
        });
        this.name = "InternalServerError";
        this.$fault = "server";
        Object.setPrototypeOf(this, InternalServerError.prototype);
        this.Message = opts.Message;
        this.Code = opts.Code;
    }
}
exports.InternalServerError = InternalServerError;
class InvalidParameterException extends TextractServiceException_1.TextractServiceException {
    constructor(opts) {
        super({
            name: "InvalidParameterException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidParameterException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidParameterException.prototype);
        this.Message = opts.Message;
        this.Code = opts.Code;
    }
}
exports.InvalidParameterException = InvalidParameterException;
class InvalidS3ObjectException extends TextractServiceException_1.TextractServiceException {
    constructor(opts) {
        super({
            name: "InvalidS3ObjectException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidS3ObjectException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidS3ObjectException.prototype);
        this.Message = opts.Message;
        this.Code = opts.Code;
    }
}
exports.InvalidS3ObjectException = InvalidS3ObjectException;
class ProvisionedThroughputExceededException extends TextractServiceException_1.TextractServiceException {
    constructor(opts) {
        super({
            name: "ProvisionedThroughputExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "ProvisionedThroughputExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ProvisionedThroughputExceededException.prototype);
        this.Message = opts.Message;
        this.Code = opts.Code;
    }
}
exports.ProvisionedThroughputExceededException = ProvisionedThroughputExceededException;
class ThrottlingException extends TextractServiceException_1.TextractServiceException {
    constructor(opts) {
        super({
            name: "ThrottlingException",
            $fault: "server",
            ...opts,
        });
        this.name = "ThrottlingException";
        this.$fault = "server";
        Object.setPrototypeOf(this, ThrottlingException.prototype);
        this.Message = opts.Message;
        this.Code = opts.Code;
    }
}
exports.ThrottlingException = ThrottlingException;
class UnsupportedDocumentException extends TextractServiceException_1.TextractServiceException {
    constructor(opts) {
        super({
            name: "UnsupportedDocumentException",
            $fault: "client",
            ...opts,
        });
        this.name = "UnsupportedDocumentException";
        this.$fault = "client";
        Object.setPrototypeOf(this, UnsupportedDocumentException.prototype);
        this.Message = opts.Message;
        this.Code = opts.Code;
    }
}
exports.UnsupportedDocumentException = UnsupportedDocumentException;
exports.ValueType = {
    DATE: "DATE",
};
exports.AutoUpdate = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
};
class ConflictException extends TextractServiceException_1.TextractServiceException {
    constructor(opts) {
        super({
            name: "ConflictException",
            $fault: "client",
            ...opts,
        });
        this.name = "ConflictException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ConflictException.prototype);
        this.Message = opts.Message;
        this.Code = opts.Code;
    }
}
exports.ConflictException = ConflictException;
class IdempotentParameterMismatchException extends TextractServiceException_1.TextractServiceException {
    constructor(opts) {
        super({
            name: "IdempotentParameterMismatchException",
            $fault: "client",
            ...opts,
        });
        this.name = "IdempotentParameterMismatchException";
        this.$fault = "client";
        Object.setPrototypeOf(this, IdempotentParameterMismatchException.prototype);
        this.Message = opts.Message;
        this.Code = opts.Code;
    }
}
exports.IdempotentParameterMismatchException = IdempotentParameterMismatchException;
class LimitExceededException extends TextractServiceException_1.TextractServiceException {
    constructor(opts) {
        super({
            name: "LimitExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "LimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, LimitExceededException.prototype);
        this.Message = opts.Message;
        this.Code = opts.Code;
    }
}
exports.LimitExceededException = LimitExceededException;
class ServiceQuotaExceededException extends TextractServiceException_1.TextractServiceException {
    constructor(opts) {
        super({
            name: "ServiceQuotaExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "ServiceQuotaExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ServiceQuotaExceededException.prototype);
        this.Message = opts.Message;
        this.Code = opts.Code;
    }
}
exports.ServiceQuotaExceededException = ServiceQuotaExceededException;
class ValidationException extends TextractServiceException_1.TextractServiceException {
    constructor(opts) {
        super({
            name: "ValidationException",
            $fault: "client",
            ...opts,
        });
        this.name = "ValidationException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ValidationException.prototype);
        this.Message = opts.Message;
        this.Code = opts.Code;
    }
}
exports.ValidationException = ValidationException;
class InvalidKMSKeyException extends TextractServiceException_1.TextractServiceException {
    constructor(opts) {
        super({
            name: "InvalidKMSKeyException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidKMSKeyException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidKMSKeyException.prototype);
        this.Message = opts.Message;
        this.Code = opts.Code;
    }
}
exports.InvalidKMSKeyException = InvalidKMSKeyException;
class ResourceNotFoundException extends TextractServiceException_1.TextractServiceException {
    constructor(opts) {
        super({
            name: "ResourceNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourceNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceNotFoundException.prototype);
        this.Message = opts.Message;
        this.Code = opts.Code;
    }
}
exports.ResourceNotFoundException = ResourceNotFoundException;
exports.JobStatus = {
    FAILED: "FAILED",
    IN_PROGRESS: "IN_PROGRESS",
    PARTIAL_SUCCESS: "PARTIAL_SUCCESS",
    SUCCEEDED: "SUCCEEDED",
};
class InvalidJobIdException extends TextractServiceException_1.TextractServiceException {
    constructor(opts) {
        super({
            name: "InvalidJobIdException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidJobIdException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidJobIdException.prototype);
        this.Message = opts.Message;
        this.Code = opts.Code;
    }
}
exports.InvalidJobIdException = InvalidJobIdException;
